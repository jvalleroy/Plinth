diff --git a/actions/tahoe-lafs b/actions/tahoe-lafs
index ce5ea42a..4ccd54e3 100755
--- a/actions/tahoe-lafs
+++ b/actions/tahoe-lafs
@@ -22,17 +22,23 @@ Configuration helper for Tahoe-LAFS.
 
 import argparse
 import grp
-import os
+import json
 import pwd
 import shutil
 import subprocess
+
+import os
 import ruamel.yaml
 
 from plinth import action_utils
+from plinth.modules.tahoe import (
+    introducer_name,
+    introducers_file,
+    storage_node_name,
+    tahoe_home,
+    introducer_furl_file, restart_storage_node)
+from plinth.utils import YAMLFile
 
-tahoe_home = '/var/lib/tahoe-lafs'
-introducer_name = 'introducer'
-storage_node_name = 'storage_node'
 domain_name_file = os.path.join(tahoe_home, 'domain_name')
 
 
@@ -43,22 +49,48 @@ def parse_arguments():
 
     subparsers.add_parser('enable', help='Enable Tahoe-LAFS')
     subparsers.add_parser('disable', help='Disable Tahoe-LAFS')
-    setup = subparsers.add_parser(
-        'setup', help='Set domain name for Tahoe-LAFS')
-    setup.add_argument(
-        '--domain-name', help='The domain name to be used by Tahoe-LAFS')
-    subparsers.add_parser(
-        'create-introducer', help='Create and start the introducer node')
-    subparsers.add_parser(
-        'create-storage-node', help='Create and start the storage node')
-    subparsers.add_parser('autostart', help="Automatically start all "
-                          "introducers and storage nodes on system startup")
+    setup = subparsers.add_parser('setup',
+                                  help='Set domain name for Tahoe-LAFS')
+    setup.add_argument('--domain-name',
+                       help='The domain name to be used by Tahoe-LAFS')
+    subparsers.add_parser('create-introducer',
+                          help='Create and start the introducer node')
+    subparsers.add_parser('create-storage-node',
+                          help='Create and start the storage node')
+    subparsers.add_parser('autostart',
+                          help="Automatically start all introducers and "
+                               "storage nodes on system startup")
+    intro_parser_add = subparsers.add_parser('add-introducer',
+                                             help="Add an introducer to the "
+                                                  "storage node's "
+                                                  "list of introducers.")
+    intro_parser_add.add_argument('--introducer', help="Add an introducer to "
+                                                       "the storage node's "
+                                                       "list of introducers "
+                                                       "Param introducer must "
+                                                       "be a tuple of "
+                                                       "(pet_name, furl)")
+    intro_parser_remove = subparsers.add_parser('remove-introducer',
+                                                help="Rename the introducer "
+                                                     "entry in the "
+                                                     "introducers.yaml file "
+                                                     "specified by the param")
+    intro_parser_remove.add_argument(
+        '--pet-name', help='The domain name that will be used by '
+                           'Matrix Synapse')
+    subparsers.add_parser('get-introducers',
+                          help="Return a dictionary of all introducers and "
+                               "their furls added to the storage node running "
+                               "on this FreedomBox.")
+    subparsers.add_parser('get-local-introducer',
+                          help="Return the name and furl of the introducer "
+                               "created on this FreedomBox")
+
     return parser.parse_args()
 
 
 def subcommand_setup(arguments):
-    """Actions to be performed before installing Tahoe-LAFS"""
-
+    """Actions to be performed before installing Tahoe-LAFS."""
     # Create tahoe group if needed.
     try:
         grp.getgrnam('tahoe-lafs')
@@ -88,16 +120,15 @@ def subcommand_setup(arguments):
 
 
 def subcommand_autostart(_):
-    """
-    Automatically start all introducers and storage nodes on system startup
+    """Automatically start all introducers and storage nodes on system startup.
     """
     with open('/etc/default/tahoe-lafs', 'a') as autostart_conf:
         autostart_conf.write('AUTOSTART="all"')
 
 
 def get_configured_domain_name():
-    """
-    Extract and return the domain name from the domain name file.
+    """Extract and return the domain name from the domain name file.
+
     Throws DomainNameNotSetupException if the domain name file is not found.
     """
     if not os.path.exists(domain_name_file):
@@ -108,7 +139,7 @@ def get_configured_domain_name():
 
 
 def subcommand_create_introducer(_):
-    """Create a Tahoe-LAFS introducer on this FreedomBox"""
+    """Create a Tahoe-LAFS introducer on this FreedomBox."""
     os.chdir(tahoe_home)
 
     if not os.path.exists(os.path.join(tahoe_home, introducer_name)):
@@ -122,7 +153,7 @@ def subcommand_create_introducer(_):
 
 
 def subcommand_create_storage_node(_):
-    """Create a Tahoe-LAFS storage node on this FreedomBox"""
+    """Create a Tahoe-LAFS storage node on this FreedomBox."""
     os.chdir(tahoe_home)
 
     if not os.path.exists(os.path.join(tahoe_home, storage_node_name)):
@@ -147,6 +178,49 @@ def subcommand_create_storage_node(_):
     subprocess.call(['tahoe', 'start', storage_node_name])
 
 
+def subcommand_add_introducer(arguments):
+    """Add an introducer to the storage node's list of introducers.
+
+    Param introducer must be a tuple of (pet_name, furl).
+    """
+    with YAMLFile(introducers_file, restart_storage_node) as conf:
+        pet_name, furl = arguments.introducer.split(",")
+        conf['introducers'][pet_name] = {'furl': furl}
+
+
+def subcommand_remove_introducer(arguments):
+    """Rename the introducer entry in the introducers.yaml file specified
+
+    by the param pet_name
+    """
+    with YAMLFile(introducers_file, restart_storage_node) as conf:
+        del conf['introducers'][arguments.pet_name]
+
+
+def subcommand_get_introducers(_):
+    """Return a dictionary of all introducers and their furls.
+
+    The ones added to the storage node running on this FreedomBox.
+    """
+    with open(introducers_file, 'r') as intro_conf:
+        conf = ruamel.yaml.round_trip_load(intro_conf)
+
+    introducers = []
+    for pet_name in conf['introducers'].keys():
+        introducers.append((pet_name, conf['introducers'][pet_name]['furl']))
+
+    print(json.dumps(introducers))
+
+
+def subcommand_get_local_introducer(_):
+    """Return the name and furl of the introducer created on this FreedomBox
+    """
+    with open(introducer_furl_file, 'r') as furl_file:
+        furl = furl_file.read().rstrip()
+
+    print(json.dumps((introducer_name, furl)))
+
+
 def subcommand_enable(_):
     """Enable web configuration and reload."""
     action_utils.service_enable('tahoe-lafs')
diff --git a/plinth/modules/tahoe/__init__.py b/plinth/modules/tahoe/__init__.py
index 4996aa6b..a8c541aa 100644
--- a/plinth/modules/tahoe/__init__.py
+++ b/plinth/modules/tahoe/__init__.py
@@ -17,11 +17,10 @@
 """
 Plinth module to configure Tahoe-LAFS.
 """
-
-import os
+import json
 import subprocess
 
-import ruamel.yaml
+import os
 from django.utils.translation import ugettext_lazy as _
 
 from plinth import action_utils
@@ -31,7 +30,6 @@ from plinth import frontpage
 from plinth import service as service_module
 from plinth.exceptions import DomainNameNotSetupException
 from plinth.menu import main_menu
-from plinth.utils import YAMLFile
 from plinth.utils import format_lazy
 
 version = 1
@@ -60,8 +58,7 @@ def is_setup():
 
 
 def get_configured_domain_name():
-    """
-    Extract and return the domain name from the domain name file.
+    """Extract and return the domain name from the domain name file.
     Throws DomainNameNotSetupException if the domain name file is not found.
     """
     if not os.path.exists(domain_name_file):
@@ -83,7 +80,7 @@ description = [
         box_name=_(cfg.box_name)),
     _('When enabled, the Tahoe-LAFS storage node\'s web interface will be '
       'available from <a href=\"http://{}:5678\">/tahoe-lafs</a> '.format(
-          get_configured_domain_name()) if is_setup() else '')
+        get_configured_domain_name()) if is_setup() else '')
 ]
 
 
@@ -129,9 +126,7 @@ def setup(helper, old_version=None):
 
 
 def post_setup(configured_domain_name):
-    """
-    Actions to be performed after installing tahoe-lafs package
-    """
+    """Actions to be performed after installing tahoe-lafs package."""
     actions.superuser_run('tahoe-lafs',
                           ['setup', '--domain-name', configured_domain_name])
     actions.superuser_run('tahoe-lafs', ['enable'])
@@ -173,64 +168,53 @@ def disable():
 
 def diagnose():
     """Run diagnostics and return the results."""
-    results = []
-
-    results.append(
+    return [action_utils.diagnose_url(
+        'http://localhost:5678', kind='4', check_certificate=False),
         action_utils.diagnose_url(
-            'http://localhost:5678', kind='4', check_certificate=False))
-    results.append(
-        action_utils.diagnose_url(
-            'http://localhost:5678', kind='6', check_certificate=False))
-    results.append(
+            'http://localhost:5678', kind='6', check_certificate=False),
         action_utils.diagnose_url(
             'http://{}:5678'.format(get_configured_domain_name()),
             kind='4',
-            check_certificate=False))
-
-    return results
+            check_certificate=False)]
 
 
 def add_introducer(introducer):
-    """
-    Add an introducer to the storage node's list of introducers.
+    """Add an introducer to the storage node's list of introducers.
     Param introducer must be a tuple of (pet_name, furl)
     """
-    with YAMLFile(introducers_file, restart_storage_node) as conf:
-        pet_name, furl = introducer
-        conf['introducers'][pet_name] = {'furl': furl}
+    actions.run_as_user('tahoe-lafs',
+                        ['add-introducer',
+                         "--introducer",
+                         ",".join(introducer)],
+                        become_user='tahoe-lafs')
 
 
 def remove_introducer(pet_name):
+    """Rename the introducer entry in the introducers.yaml file specified by
+    the param pet_name.
     """
-    Rename the introducer entry in the introducers.yaml file
-    specified by the param pet_name
-    """
-    with YAMLFile(introducers_file, restart_storage_node) as conf:
-        del conf['introducers'][pet_name]
+    actions.run_as_user('tahoe-lafs',
+                        ['remove-introducer', '--pet-name', pet_name],
+                        become_user='tahoe-lafs')
 
 
 def get_introducers():
+    """Return a dictionary of all introducers and their furls added to the
+    storage node running on this FreedomBox.
     """
-    Return a dictionary of all introducers and their furls
-    added to the storage node running on this FreedomBox.
-    """
-    with open(introducers_file, 'r') as intro_conf:
-        conf = ruamel.yaml.round_trip_load(intro_conf)
-
-    introducers = []
-    for pet_name in conf['introducers'].keys():
-        introducers.append((pet_name, conf['introducers'][pet_name]['furl']))
+    introducers = actions.run_as_user('tahoe-lafs', ['get-introducers'],
+                                      become_user='tahoe-lafs')
 
-    return introducers
+    return json.loads(introducers)
 
 
 def get_local_introducer():
+    """Return the name and furl of the introducer created on this FreedomBox.
     """
-    Return the name and furl of the introducer created on this FreedomBox
-    """
-    with open(introducer_furl_file, 'r') as furl_file:
-        furl = furl_file.read().rstrip()
-    return (introducer_name, furl)
+    introducer = actions.run_as_user('tahoe-lafs', ['get-local-introducer'],
+                                     become_user='tahoe-lafs')
+
+    return json.loads(introducer)
 
 
 def restart_storage_node():
diff --git a/plinth/utils.py b/plinth/utils.py
index be531e0a..8c14755c 100644
--- a/plinth/utils.py
+++ b/plinth/utils.py
@@ -82,15 +82,13 @@ def get_domain_names():
 
 
 class YAMLFile(object):
-    """
-    A context management class for updating YAML files
-    """
-
+    """A context management class for updating YAML files"""
     def __init__(self, yaml_file, post_exit=None):
-        """
+        """Return a context object for the YAML file.
+
         Parameters:
-        yaml_file - the YAML file to update
-        post_exit - a function that will be called after updating the YAML file
+        yaml_file - the YAML file to update.
+        post_exit - a function that will be called after updating the YAML file.
         """
         self.yaml_file = yaml_file
         self.post_exit = post_exit
@@ -102,11 +100,13 @@ class YAMLFile(object):
                 self.conf = ruamel.yaml.round_trip_load(intro_conf)
             else:
                 self.conf = {}
+
             return self.conf
 
     def __exit__(self, typ, value, traceback):
         with open(self.yaml_file, 'w') as intro_conf:
             ruamel.yaml.round_trip_dump(self.conf, intro_conf)
+
         if self.post_exit:
             self.post_exit()
 
