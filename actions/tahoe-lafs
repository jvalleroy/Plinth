#!/usr/bin/python3
# -*- mode: python -*-
#
# This file is part of Plinth.
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as
# published by the Free Software Foundation, either version 3 of the
# License, or (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
"""
Configuration helper for Tahoe-LAFS.
"""

import argparse
import grp
import os
import pwd
import shutil
import subprocess
import ruamel.yaml

from plinth import action_utils

tahoe_home = '/var/lib/tahoe-lafs'
introducer_name = 'introducer'
storage_node_name = 'storage_node'
domain_name_file = os.path.join(tahoe_home, 'domain_name')


def parse_arguments():
    """Return parsed command line arguments as dictionary."""
    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers(dest='subcommand', help='Sub command')

    subparsers.add_parser('enable', help='Enable Tahoe-LAFS')
    subparsers.add_parser('disable', help='Disable Tahoe-LAFS')
    setup = subparsers.add_parser(
        'setup', help='Set domain name for Tahoe-LAFS')
    setup.add_argument(
        '--domain-name', help='The domain name to be used by Tahoe-LAFS')
    subparsers.add_parser(
        'create-introducer', help='Create and start the introducer node')
    subparsers.add_parser(
        'create-storage-node', help='Create and start the storage node')
    subparsers.add_parser('autostart', help="Automatically start all "
                          "introducers and storage nodes on system startup")
    return parser.parse_args()


def subcommand_setup(arguments):
    """Actions to be performed before installing Tahoe-LAFS"""

    # Create tahoe group if needed.
    try:
        grp.getgrnam('tahoe-lafs')
    except KeyError:
        subprocess.run(['addgroup', 'tahoe-lafs'], check=True)

    # Create tahoe user is needed.
    try:
        pwd.getpwnam('tahoe-lafs')
    except KeyError:
        subprocess.run(
            [
                'adduser', '--system', '--ingroup', 'tahoe-lafs',
                '--home', '/var/lib/tahoe-lafs',
                '--gecos', 'Tahoe-LAFS distributed file system', 'tahoe-lafs'
            ],
            check=True)

    if not os.path.exists(tahoe_home):
        os.makedirs(tahoe_home, mode=0o750)

    shutil.chown(tahoe_home, user='tahoe-lafs', group='tahoe-lafs')

    if not os.path.exists(domain_name_file):
        with open(domain_name_file, 'w') as dnf:
            dnf.write(arguments.domain_name)


def subcommand_autostart(_):
    """
    Automatically start all introducers and storage nodes on system startup
    """
    with open('/etc/default/tahoe-lafs', 'a') as autostart_conf:
        autostart_conf.write('AUTOSTART="all"')


def get_configured_domain_name():
    """
    Extract and return the domain name from the domain name file.
    Throws DomainNameNotSetupException if the domain name file is not found.
    """
    if not os.path.exists(domain_name_file):
        raise DomainNameNotSetupException
    else:
        with open(domain_name_file) as dnf:
            return dnf.read().rstrip()


def subcommand_create_introducer(_):
    """Create a Tahoe-LAFS introducer on this FreedomBox"""
    os.chdir(tahoe_home)

    if not os.path.exists(os.path.join(tahoe_home, introducer_name)):
        subprocess.check_call([
            'tahoe', 'create-introducer', '--port=3456',
            '--location=tcp:{}:3456'.format(get_configured_domain_name()),
            introducer_name
        ])

    subprocess.call(['tahoe', 'start', introducer_name])


def subcommand_create_storage_node(_):
    """Create a Tahoe-LAFS storage node on this FreedomBox"""
    os.chdir(tahoe_home)

    if not os.path.exists(os.path.join(tahoe_home, storage_node_name)):
        subprocess.check_call([
            'tahoe', 'create-node', '--nickname=\"storage_node\"',
            '--webport=1234',
            '--hostname={}'.format(get_configured_domain_name()),
            storage_node_name
        ])
        with open(
                os.path.join(tahoe_home, introducer_name, 'private',
                             introducer_name + '.furl'), 'r') as furl_file:
            furl = furl_file.read().rstrip()
            conf_dict = {'introducers': {introducer_name: {'furl': furl}}}
            conf_yaml = ruamel.yaml.dump(
                conf_dict, Dumper=ruamel.yaml.RoundTripDumper)
            with open(
                    os.path.join(tahoe_home, storage_node_name, 'private',
                                 'introducers.yaml'), 'w') as introducers_file:
                introducers_file.write(conf_yaml)

    subprocess.call(['tahoe', 'start', storage_node_name])


def subcommand_enable(_):
    """Enable web configuration and reload."""
    action_utils.service_enable('tahoe-lafs')
    action_utils.webserver_enable('tahoe-plinth')


def subcommand_disable(_):
    """Disable web configuration and reload."""
    action_utils.webserver_disable('tahoe-plinth')
    action_utils.service_disable('tahoe-lafs')


def main():
    """Parse arguments and perform all duties."""
    arguments = parse_arguments()

    subcommand = arguments.subcommand.replace('-', '_')
    subcommand_method = globals()['subcommand_' + subcommand]
    subcommand_method(arguments)


if __name__ == '__main__':
    main()


class DomainNameNotSetupException(Exception):
    pass
